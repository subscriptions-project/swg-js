/**
 * Copyright 2019 The Subscribe with Google Authors. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS-IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as PropensityApi from '../api/propensity-api';
import {PropensityServer} from './propensity-server';

/**
 * @implements {PropensityApi.PropensityApi}
 */
export class Propensity {
  /**
   * @param {!Window} win
   * @param {!../model/page-config.PageConfig} pageConfig
   * @param {!../api/client-event-manager-api.ClientEventManagerApi} eventManager
   * @param {!../api/logger-api.LoggerApi} logger
   */
  constructor(win, pageConfig, eventManager, logger) {
    /** @private @const {!Window} */
    this.win_ = win;
    /** @private {PropensityServer} */
    this.propensityServer_ = new PropensityServer(
      win,
      pageConfig.getPublicationId(),
      eventManager
    );

    /** @private @const {!../api/logger-api.LoggerApi} */
    this.logger_ = logger;
  }

  /** @override */
  sendSubscriptionState(state, jsonProducts) {
    this.logger_.sendSubscriptionState(state, jsonProducts);
  }

  /** @override */
  getPropensity(type) {
    if (type && !Object.values(PropensityApi.PropensityType).includes(type)) {
      throw new Error('Invalid propensity type requested');
    }
    if (!type) {
      type = PropensityApi.PropensityType.GENERAL;
    }
    return this.propensityServer_.getPropensity(
      this.win_.document.referrer,
      type
    );
  }

  /** @override */
  sendEvent(userEvent) {
    this.logger_.sendEvent(userEvent);
  }

  /**
   * Enables logging events generated by the Subscribe with Google codebase
   * to the Propensity to Subscribe server.
   */
  enableLoggingSwgEvents() {
    this.propensityServer_.enableLoggingSwgEvents();
  }
}
